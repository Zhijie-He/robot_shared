// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MotorStates.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__WLROBOT_MSG_MOTORSTATES_HPP
#define FAST_DDS_GENERATED__WLROBOT_MSG_MOTORSTATES_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MOTORSTATES_SOURCE)
#define MOTORSTATES_DllAPI __declspec( dllexport )
#else
#define MOTORSTATES_DllAPI __declspec( dllimport )
#endif // MOTORSTATES_SOURCE
#else
#define MOTORSTATES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MOTORSTATES_DllAPI
#endif // _WIN32

namespace wlrobot {

namespace msg {

/*!
 * @brief This class represents the structure MotorStates defined by the user in the IDL file.
 * @ingroup MotorStates
 */
class MotorStates
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotorStates()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotorStates()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MotorStates that will be copied.
     */
    eProsima_user_DllExport MotorStates(
            const MotorStates& x)
    {
                    m_mode = x.m_mode;

                    m_pos = x.m_pos;

                    m_w = x.m_w;

                    m_t = x.m_t;

                    m_temperature = x.m_temperature;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MotorStates that will be copied.
     */
    eProsima_user_DllExport MotorStates(
            MotorStates&& x) noexcept
    {
        m_mode = std::move(x.m_mode);
        m_pos = std::move(x.m_pos);
        m_w = std::move(x.m_w);
        m_t = std::move(x.m_t);
        m_temperature = std::move(x.m_temperature);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MotorStates that will be copied.
     */
    eProsima_user_DllExport MotorStates& operator =(
            const MotorStates& x)
    {

                    m_mode = x.m_mode;

                    m_pos = x.m_pos;

                    m_w = x.m_w;

                    m_t = x.m_t;

                    m_temperature = x.m_temperature;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MotorStates that will be copied.
     */
    eProsima_user_DllExport MotorStates& operator =(
            MotorStates&& x) noexcept
    {

        m_mode = std::move(x.m_mode);
        m_pos = std::move(x.m_pos);
        m_w = std::move(x.m_w);
        m_t = std::move(x.m_t);
        m_temperature = std::move(x.m_temperature);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MotorStates object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotorStates& x) const
    {
        return (m_mode == x.m_mode &&
           m_pos == x.m_pos &&
           m_w == x.m_w &&
           m_t == x.m_t &&
           m_temperature == x.m_temperature);
    }

    /*!
     * @brief Comparison operator.
     * @param x MotorStates object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotorStates& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member mode
     * @param _mode New value to be copied in member mode
     */
    eProsima_user_DllExport void mode(
            const std::array<uint32_t, 12>& _mode)
    {
        m_mode = _mode;
    }

    /*!
     * @brief This function moves the value in member mode
     * @param _mode New value to be moved in member mode
     */
    eProsima_user_DllExport void mode(
            std::array<uint32_t, 12>&& _mode)
    {
        m_mode = std::move(_mode);
    }

    /*!
     * @brief This function returns a constant reference to member mode
     * @return Constant reference to member mode
     */
    eProsima_user_DllExport const std::array<uint32_t, 12>& mode() const
    {
        return m_mode;
    }

    /*!
     * @brief This function returns a reference to member mode
     * @return Reference to member mode
     */
    eProsima_user_DllExport std::array<uint32_t, 12>& mode()
    {
        return m_mode;
    }


    /*!
     * @brief This function copies the value in member pos
     * @param _pos New value to be copied in member pos
     */
    eProsima_user_DllExport void pos(
            const std::array<float, 12>& _pos)
    {
        m_pos = _pos;
    }

    /*!
     * @brief This function moves the value in member pos
     * @param _pos New value to be moved in member pos
     */
    eProsima_user_DllExport void pos(
            std::array<float, 12>&& _pos)
    {
        m_pos = std::move(_pos);
    }

    /*!
     * @brief This function returns a constant reference to member pos
     * @return Constant reference to member pos
     */
    eProsima_user_DllExport const std::array<float, 12>& pos() const
    {
        return m_pos;
    }

    /*!
     * @brief This function returns a reference to member pos
     * @return Reference to member pos
     */
    eProsima_user_DllExport std::array<float, 12>& pos()
    {
        return m_pos;
    }


    /*!
     * @brief This function copies the value in member w
     * @param _w New value to be copied in member w
     */
    eProsima_user_DllExport void w(
            const std::array<float, 12>& _w)
    {
        m_w = _w;
    }

    /*!
     * @brief This function moves the value in member w
     * @param _w New value to be moved in member w
     */
    eProsima_user_DllExport void w(
            std::array<float, 12>&& _w)
    {
        m_w = std::move(_w);
    }

    /*!
     * @brief This function returns a constant reference to member w
     * @return Constant reference to member w
     */
    eProsima_user_DllExport const std::array<float, 12>& w() const
    {
        return m_w;
    }

    /*!
     * @brief This function returns a reference to member w
     * @return Reference to member w
     */
    eProsima_user_DllExport std::array<float, 12>& w()
    {
        return m_w;
    }


    /*!
     * @brief This function copies the value in member t
     * @param _t New value to be copied in member t
     */
    eProsima_user_DllExport void t(
            const std::array<float, 12>& _t)
    {
        m_t = _t;
    }

    /*!
     * @brief This function moves the value in member t
     * @param _t New value to be moved in member t
     */
    eProsima_user_DllExport void t(
            std::array<float, 12>&& _t)
    {
        m_t = std::move(_t);
    }

    /*!
     * @brief This function returns a constant reference to member t
     * @return Constant reference to member t
     */
    eProsima_user_DllExport const std::array<float, 12>& t() const
    {
        return m_t;
    }

    /*!
     * @brief This function returns a reference to member t
     * @return Reference to member t
     */
    eProsima_user_DllExport std::array<float, 12>& t()
    {
        return m_t;
    }


    /*!
     * @brief This function copies the value in member temperature
     * @param _temperature New value to be copied in member temperature
     */
    eProsima_user_DllExport void temperature(
            const std::array<int32_t, 12>& _temperature)
    {
        m_temperature = _temperature;
    }

    /*!
     * @brief This function moves the value in member temperature
     * @param _temperature New value to be moved in member temperature
     */
    eProsima_user_DllExport void temperature(
            std::array<int32_t, 12>&& _temperature)
    {
        m_temperature = std::move(_temperature);
    }

    /*!
     * @brief This function returns a constant reference to member temperature
     * @return Constant reference to member temperature
     */
    eProsima_user_DllExport const std::array<int32_t, 12>& temperature() const
    {
        return m_temperature;
    }

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport std::array<int32_t, 12>& temperature()
    {
        return m_temperature;
    }



private:

    std::array<uint32_t, 12> m_mode{0};
    std::array<float, 12> m_pos{0.0};
    std::array<float, 12> m_w{0.0};
    std::array<float, 12> m_t{0.0};
    std::array<int32_t, 12> m_temperature{0};

};

} // namespace msg

} // namespace wlrobot

#endif // _FAST_DDS_GENERATED_WLROBOT_MSG_MOTORSTATES_HPP_


