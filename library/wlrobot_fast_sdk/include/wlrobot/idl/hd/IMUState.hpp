// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file IMUState.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__WLROBOT_MSG_IMUSTATE_HPP
#define FAST_DDS_GENERATED__WLROBOT_MSG_IMUSTATE_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(IMUSTATE_SOURCE)
#define IMUSTATE_DllAPI __declspec( dllexport )
#else
#define IMUSTATE_DllAPI __declspec( dllimport )
#endif // IMUSTATE_SOURCE
#else
#define IMUSTATE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define IMUSTATE_DllAPI
#endif // _WIN32

namespace wlrobot {

namespace msg {

/*!
 * @brief This class represents the structure IMUState defined by the user in the IDL file.
 * @ingroup IMUState
 */
class IMUState
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport IMUState()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~IMUState()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object IMUState that will be copied.
     */
    eProsima_user_DllExport IMUState(
            const IMUState& x)
    {
                    m_accelerometer = x.m_accelerometer;

                    m_gyroscope = x.m_gyroscope;

                    m_quaternion = x.m_quaternion;

                    m_rpy = x.m_rpy;

                    m_temperature = x.m_temperature;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object IMUState that will be copied.
     */
    eProsima_user_DllExport IMUState(
            IMUState&& x) noexcept
    {
        m_accelerometer = std::move(x.m_accelerometer);
        m_gyroscope = std::move(x.m_gyroscope);
        m_quaternion = std::move(x.m_quaternion);
        m_rpy = std::move(x.m_rpy);
        m_temperature = x.m_temperature;
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object IMUState that will be copied.
     */
    eProsima_user_DllExport IMUState& operator =(
            const IMUState& x)
    {

                    m_accelerometer = x.m_accelerometer;

                    m_gyroscope = x.m_gyroscope;

                    m_quaternion = x.m_quaternion;

                    m_rpy = x.m_rpy;

                    m_temperature = x.m_temperature;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object IMUState that will be copied.
     */
    eProsima_user_DllExport IMUState& operator =(
            IMUState&& x) noexcept
    {

        m_accelerometer = std::move(x.m_accelerometer);
        m_gyroscope = std::move(x.m_gyroscope);
        m_quaternion = std::move(x.m_quaternion);
        m_rpy = std::move(x.m_rpy);
        m_temperature = x.m_temperature;
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x IMUState object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const IMUState& x) const
    {
        return (m_accelerometer == x.m_accelerometer &&
           m_gyroscope == x.m_gyroscope &&
           m_quaternion == x.m_quaternion &&
           m_rpy == x.m_rpy &&
           m_temperature == x.m_temperature &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x IMUState object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const IMUState& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member accelerometer
     * @param _accelerometer New value to be copied in member accelerometer
     */
    eProsima_user_DllExport void accelerometer(
            const std::array<float, 3>& _accelerometer)
    {
        m_accelerometer = _accelerometer;
    }

    /*!
     * @brief This function moves the value in member accelerometer
     * @param _accelerometer New value to be moved in member accelerometer
     */
    eProsima_user_DllExport void accelerometer(
            std::array<float, 3>&& _accelerometer)
    {
        m_accelerometer = std::move(_accelerometer);
    }

    /*!
     * @brief This function returns a constant reference to member accelerometer
     * @return Constant reference to member accelerometer
     */
    eProsima_user_DllExport const std::array<float, 3>& accelerometer() const
    {
        return m_accelerometer;
    }

    /*!
     * @brief This function returns a reference to member accelerometer
     * @return Reference to member accelerometer
     */
    eProsima_user_DllExport std::array<float, 3>& accelerometer()
    {
        return m_accelerometer;
    }


    /*!
     * @brief This function copies the value in member gyroscope
     * @param _gyroscope New value to be copied in member gyroscope
     */
    eProsima_user_DllExport void gyroscope(
            const std::array<float, 3>& _gyroscope)
    {
        m_gyroscope = _gyroscope;
    }

    /*!
     * @brief This function moves the value in member gyroscope
     * @param _gyroscope New value to be moved in member gyroscope
     */
    eProsima_user_DllExport void gyroscope(
            std::array<float, 3>&& _gyroscope)
    {
        m_gyroscope = std::move(_gyroscope);
    }

    /*!
     * @brief This function returns a constant reference to member gyroscope
     * @return Constant reference to member gyroscope
     */
    eProsima_user_DllExport const std::array<float, 3>& gyroscope() const
    {
        return m_gyroscope;
    }

    /*!
     * @brief This function returns a reference to member gyroscope
     * @return Reference to member gyroscope
     */
    eProsima_user_DllExport std::array<float, 3>& gyroscope()
    {
        return m_gyroscope;
    }


    /*!
     * @brief This function copies the value in member quaternion
     * @param _quaternion New value to be copied in member quaternion
     */
    eProsima_user_DllExport void quaternion(
            const std::array<float, 4>& _quaternion)
    {
        m_quaternion = _quaternion;
    }

    /*!
     * @brief This function moves the value in member quaternion
     * @param _quaternion New value to be moved in member quaternion
     */
    eProsima_user_DllExport void quaternion(
            std::array<float, 4>&& _quaternion)
    {
        m_quaternion = std::move(_quaternion);
    }

    /*!
     * @brief This function returns a constant reference to member quaternion
     * @return Constant reference to member quaternion
     */
    eProsima_user_DllExport const std::array<float, 4>& quaternion() const
    {
        return m_quaternion;
    }

    /*!
     * @brief This function returns a reference to member quaternion
     * @return Reference to member quaternion
     */
    eProsima_user_DllExport std::array<float, 4>& quaternion()
    {
        return m_quaternion;
    }


    /*!
     * @brief This function copies the value in member rpy
     * @param _rpy New value to be copied in member rpy
     */
    eProsima_user_DllExport void rpy(
            const std::array<float, 3>& _rpy)
    {
        m_rpy = _rpy;
    }

    /*!
     * @brief This function moves the value in member rpy
     * @param _rpy New value to be moved in member rpy
     */
    eProsima_user_DllExport void rpy(
            std::array<float, 3>&& _rpy)
    {
        m_rpy = std::move(_rpy);
    }

    /*!
     * @brief This function returns a constant reference to member rpy
     * @return Constant reference to member rpy
     */
    eProsima_user_DllExport const std::array<float, 3>& rpy() const
    {
        return m_rpy;
    }

    /*!
     * @brief This function returns a reference to member rpy
     * @return Reference to member rpy
     */
    eProsima_user_DllExport std::array<float, 3>& rpy()
    {
        return m_rpy;
    }


    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    eProsima_user_DllExport void temperature(
            float _temperature)
    {
        m_temperature = _temperature;
    }

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    eProsima_user_DllExport float temperature() const
    {
        return m_temperature;
    }

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport float& temperature()
    {
        return m_temperature;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    std::array<float, 3> m_accelerometer{0.0};
    std::array<float, 3> m_gyroscope{0.0};
    std::array<float, 4> m_quaternion{0.0};
    std::array<float, 3> m_rpy{0.0};
    float m_temperature{0.0};
    uint64_t m_timestamp{0};

};

} // namespace msg

} // namespace wlrobot

#endif // _FAST_DDS_GENERATED_WLROBOT_MSG_IMUSTATE_HPP_


