// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LowState.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__WLROBOT_MSG_LOWSTATE_HPP
#define FAST_DDS_GENERATED__WLROBOT_MSG_LOWSTATE_HPP

#include <cstdint>
#include <utility>
#include "wlrobot/idl/hd/JoystickMsg.hpp"
#include "wlrobot/idl/hd/MotorStates.hpp"
#include "wlrobot/idl/hd/IMUState.hpp"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LOWSTATE_SOURCE)
#define LOWSTATE_DllAPI __declspec( dllexport )
#else
#define LOWSTATE_DllAPI __declspec( dllimport )
#endif // LOWSTATE_SOURCE
#else
#define LOWSTATE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LOWSTATE_DllAPI
#endif // _WIN32

namespace wlrobot {

namespace msg {

/*!
 * @brief This class represents the structure LowState defined by the user in the IDL file.
 * @ingroup LowState
 */
class LowState
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LowState()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LowState()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LowState that will be copied.
     */
    eProsima_user_DllExport LowState(
            const LowState& x)
    {
                    m_tick = x.m_tick;

                    m_imu_state = x.m_imu_state;

                    m_motor_state = x.m_motor_state;

                    m_joystick_state = x.m_joystick_state;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LowState that will be copied.
     */
    eProsima_user_DllExport LowState(
            LowState&& x) noexcept
    {
        m_tick = x.m_tick;
        m_imu_state = std::move(x.m_imu_state);
        m_motor_state = std::move(x.m_motor_state);
        m_joystick_state = std::move(x.m_joystick_state);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LowState that will be copied.
     */
    eProsima_user_DllExport LowState& operator =(
            const LowState& x)
    {

                    m_tick = x.m_tick;

                    m_imu_state = x.m_imu_state;

                    m_motor_state = x.m_motor_state;

                    m_joystick_state = x.m_joystick_state;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LowState that will be copied.
     */
    eProsima_user_DllExport LowState& operator =(
            LowState&& x) noexcept
    {

        m_tick = x.m_tick;
        m_imu_state = std::move(x.m_imu_state);
        m_motor_state = std::move(x.m_motor_state);
        m_joystick_state = std::move(x.m_joystick_state);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x LowState object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LowState& x) const
    {
        return (m_tick == x.m_tick &&
           m_imu_state == x.m_imu_state &&
           m_motor_state == x.m_motor_state &&
           m_joystick_state == x.m_joystick_state);
    }

    /*!
     * @brief Comparison operator.
     * @param x LowState object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LowState& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member tick
     * @param _tick New value for member tick
     */
    eProsima_user_DllExport void tick(
            uint64_t _tick)
    {
        m_tick = _tick;
    }

    /*!
     * @brief This function returns the value of member tick
     * @return Value of member tick
     */
    eProsima_user_DllExport uint64_t tick() const
    {
        return m_tick;
    }

    /*!
     * @brief This function returns a reference to member tick
     * @return Reference to member tick
     */
    eProsima_user_DllExport uint64_t& tick()
    {
        return m_tick;
    }


    /*!
     * @brief This function copies the value in member imu_state
     * @param _imu_state New value to be copied in member imu_state
     */
    eProsima_user_DllExport void imu_state(
            const IMUState& _imu_state)
    {
        m_imu_state = _imu_state;
    }

    /*!
     * @brief This function moves the value in member imu_state
     * @param _imu_state New value to be moved in member imu_state
     */
    eProsima_user_DllExport void imu_state(
            IMUState&& _imu_state)
    {
        m_imu_state = std::move(_imu_state);
    }

    /*!
     * @brief This function returns a constant reference to member imu_state
     * @return Constant reference to member imu_state
     */
    eProsima_user_DllExport const IMUState& imu_state() const
    {
        return m_imu_state;
    }

    /*!
     * @brief This function returns a reference to member imu_state
     * @return Reference to member imu_state
     */
    eProsima_user_DllExport IMUState& imu_state()
    {
        return m_imu_state;
    }


    /*!
     * @brief This function copies the value in member motor_state
     * @param _motor_state New value to be copied in member motor_state
     */
    eProsima_user_DllExport void motor_state(
            const MotorStates& _motor_state)
    {
        m_motor_state = _motor_state;
    }

    /*!
     * @brief This function moves the value in member motor_state
     * @param _motor_state New value to be moved in member motor_state
     */
    eProsima_user_DllExport void motor_state(
            MotorStates&& _motor_state)
    {
        m_motor_state = std::move(_motor_state);
    }

    /*!
     * @brief This function returns a constant reference to member motor_state
     * @return Constant reference to member motor_state
     */
    eProsima_user_DllExport const MotorStates& motor_state() const
    {
        return m_motor_state;
    }

    /*!
     * @brief This function returns a reference to member motor_state
     * @return Reference to member motor_state
     */
    eProsima_user_DllExport MotorStates& motor_state()
    {
        return m_motor_state;
    }


    /*!
     * @brief This function copies the value in member joystick_state
     * @param _joystick_state New value to be copied in member joystick_state
     */
    eProsima_user_DllExport void joystick_state(
            const JoystickMsg& _joystick_state)
    {
        m_joystick_state = _joystick_state;
    }

    /*!
     * @brief This function moves the value in member joystick_state
     * @param _joystick_state New value to be moved in member joystick_state
     */
    eProsima_user_DllExport void joystick_state(
            JoystickMsg&& _joystick_state)
    {
        m_joystick_state = std::move(_joystick_state);
    }

    /*!
     * @brief This function returns a constant reference to member joystick_state
     * @return Constant reference to member joystick_state
     */
    eProsima_user_DllExport const JoystickMsg& joystick_state() const
    {
        return m_joystick_state;
    }

    /*!
     * @brief This function returns a reference to member joystick_state
     * @return Reference to member joystick_state
     */
    eProsima_user_DllExport JoystickMsg& joystick_state()
    {
        return m_joystick_state;
    }



private:

    uint64_t m_tick{0};
    IMUState m_imu_state;
    MotorStates m_motor_state;
    JoystickMsg m_joystick_state;

};

} // namespace msg

} // namespace wlrobot

#endif // _FAST_DDS_GENERATED_WLROBOT_MSG_LOWSTATE_HPP_


