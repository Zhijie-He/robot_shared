// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LowStateTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "wlrobot/idl/hd/LowStateTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "wlrobot/idl/hd/LowState.hpp"

#include "wlrobot/idl/hd/JoystickMsg.hpp"
#include "wlrobot/idl/hd/MotorStates.hpp"
#include "wlrobot/idl/hd/IMUState.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace wlrobot {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_LowState_type_identifier(
        TypeIdentifierPair& type_ids_LowState)
{

    ReturnCode_t return_code_LowState {eprosima::fastdds::dds::RETCODE_OK};
    return_code_LowState =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "wlrobot::msg::LowState", type_ids_LowState);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_LowState)
    {
        StructTypeFlag struct_flags_LowState = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_LowState = "wlrobot::msg::LowState";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LowState;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LowState;
        CompleteTypeDetail detail_LowState = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LowState, ann_custom_LowState, type_name_LowState.to_string());
        CompleteStructHeader header_LowState;
        header_LowState = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LowState);
        CompleteStructMemberSeq member_seq_LowState;
        {
            TypeIdentifierPair type_ids_tick;
            ReturnCode_t return_code_tick {eprosima::fastdds::dds::RETCODE_OK};
            return_code_tick =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_tick);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_tick)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "tick Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_tick = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_tick = 0x00000000;
            bool common_tick_ec {false};
            CommonStructMember common_tick {TypeObjectUtils::build_common_struct_member(member_id_tick, member_flags_tick, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_tick, common_tick_ec))};
            if (!common_tick_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure tick member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_tick = "tick";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_tick;
            ann_custom_LowState.reset();
            CompleteMemberDetail detail_tick = TypeObjectUtils::build_complete_member_detail(name_tick, member_ann_builtin_tick, ann_custom_LowState);
            CompleteStructMember member_tick = TypeObjectUtils::build_complete_struct_member(common_tick, detail_tick);
            TypeObjectUtils::add_complete_struct_member(member_seq_LowState, member_tick);
        }
        {
            TypeIdentifierPair type_ids_imu_state;
            ReturnCode_t return_code_imu_state {eprosima::fastdds::dds::RETCODE_OK};
            return_code_imu_state =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "wlrobot::msg::IMUState", type_ids_imu_state);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_imu_state)
            {
                ::wlrobot::msg::register_IMUState_type_identifier(type_ids_imu_state);
            }
            StructMemberFlag member_flags_imu_state = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_imu_state = 0x00000001;
            bool common_imu_state_ec {false};
            CommonStructMember common_imu_state {TypeObjectUtils::build_common_struct_member(member_id_imu_state, member_flags_imu_state, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_imu_state, common_imu_state_ec))};
            if (!common_imu_state_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure imu_state member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_imu_state = "imu_state";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_imu_state;
            ann_custom_LowState.reset();
            CompleteMemberDetail detail_imu_state = TypeObjectUtils::build_complete_member_detail(name_imu_state, member_ann_builtin_imu_state, ann_custom_LowState);
            CompleteStructMember member_imu_state = TypeObjectUtils::build_complete_struct_member(common_imu_state, detail_imu_state);
            TypeObjectUtils::add_complete_struct_member(member_seq_LowState, member_imu_state);
        }
        {
            TypeIdentifierPair type_ids_motor_state;
            ReturnCode_t return_code_motor_state {eprosima::fastdds::dds::RETCODE_OK};
            return_code_motor_state =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "wlrobot::msg::MotorStates", type_ids_motor_state);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_motor_state)
            {
                ::wlrobot::msg::register_MotorStates_type_identifier(type_ids_motor_state);
            }
            StructMemberFlag member_flags_motor_state = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_motor_state = 0x00000002;
            bool common_motor_state_ec {false};
            CommonStructMember common_motor_state {TypeObjectUtils::build_common_struct_member(member_id_motor_state, member_flags_motor_state, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_motor_state, common_motor_state_ec))};
            if (!common_motor_state_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure motor_state member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_motor_state = "motor_state";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_motor_state;
            ann_custom_LowState.reset();
            CompleteMemberDetail detail_motor_state = TypeObjectUtils::build_complete_member_detail(name_motor_state, member_ann_builtin_motor_state, ann_custom_LowState);
            CompleteStructMember member_motor_state = TypeObjectUtils::build_complete_struct_member(common_motor_state, detail_motor_state);
            TypeObjectUtils::add_complete_struct_member(member_seq_LowState, member_motor_state);
        }
        {
            TypeIdentifierPair type_ids_joystick_state;
            ReturnCode_t return_code_joystick_state {eprosima::fastdds::dds::RETCODE_OK};
            return_code_joystick_state =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "wlrobot::msg::JoystickMsg", type_ids_joystick_state);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_joystick_state)
            {
                ::wlrobot::msg::register_JoystickMsg_type_identifier(type_ids_joystick_state);
            }
            StructMemberFlag member_flags_joystick_state = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_joystick_state = 0x00000003;
            bool common_joystick_state_ec {false};
            CommonStructMember common_joystick_state {TypeObjectUtils::build_common_struct_member(member_id_joystick_state, member_flags_joystick_state, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_joystick_state, common_joystick_state_ec))};
            if (!common_joystick_state_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure joystick_state member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_joystick_state = "joystick_state";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_joystick_state;
            ann_custom_LowState.reset();
            CompleteMemberDetail detail_joystick_state = TypeObjectUtils::build_complete_member_detail(name_joystick_state, member_ann_builtin_joystick_state, ann_custom_LowState);
            CompleteStructMember member_joystick_state = TypeObjectUtils::build_complete_struct_member(common_joystick_state, detail_joystick_state);
            TypeObjectUtils::add_complete_struct_member(member_seq_LowState, member_joystick_state);
        }
        CompleteStructType struct_type_LowState = TypeObjectUtils::build_complete_struct_type(struct_flags_LowState, header_LowState, member_seq_LowState);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LowState, type_name_LowState.to_string(), type_ids_LowState))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "wlrobot::msg::LowState already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace msg

} // namespace wlrobot

