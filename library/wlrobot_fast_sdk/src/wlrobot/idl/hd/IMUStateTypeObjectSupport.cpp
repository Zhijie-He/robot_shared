// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file IMUStateTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */


#include "wlrobot/idl/hd/IMUStateTypeObjectSupport.hpp"
#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "wlrobot/idl/hd/IMUState.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace wlrobot {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_IMUState_type_identifier(
        TypeIdentifierPair& type_ids_IMUState)
{

    ReturnCode_t return_code_IMUState {eprosima::fastdds::dds::RETCODE_OK};
    return_code_IMUState =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "wlrobot::msg::IMUState", type_ids_IMUState);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_IMUState)
    {
        StructTypeFlag struct_flags_IMUState = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_IMUState = "wlrobot::msg::IMUState";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_IMUState;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_IMUState;
        CompleteTypeDetail detail_IMUState = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_IMUState, ann_custom_IMUState, type_name_IMUState.to_string());
        CompleteStructHeader header_IMUState;
        header_IMUState = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_IMUState);
        CompleteStructMemberSeq member_seq_IMUState;
        {
            TypeIdentifierPair type_ids_accelerometer;
            ReturnCode_t return_code_accelerometer {eprosima::fastdds::dds::RETCODE_OK};
            return_code_accelerometer =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_3", type_ids_accelerometer);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_accelerometer)
            {
                return_code_accelerometer =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_accelerometer);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_accelerometer)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_3_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_3 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_accelerometer, element_identifier_anonymous_array_float_3_ec))};
                if (!element_identifier_anonymous_array_float_3_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_3 = EK_COMPLETE;
                if (TK_NONE == type_ids_accelerometer.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_3 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_3 = 0;
                PlainCollectionHeader header_anonymous_array_float_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_3, element_flags_anonymous_array_float_3);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_3, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_3", type_ids_accelerometer))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_accelerometer = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_accelerometer = 0x00000000;
            bool common_accelerometer_ec {false};
            CommonStructMember common_accelerometer {TypeObjectUtils::build_common_struct_member(member_id_accelerometer, member_flags_accelerometer, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_accelerometer, common_accelerometer_ec))};
            if (!common_accelerometer_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure accelerometer member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_accelerometer = "accelerometer";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_accelerometer;
            ann_custom_IMUState.reset();
            CompleteMemberDetail detail_accelerometer = TypeObjectUtils::build_complete_member_detail(name_accelerometer, member_ann_builtin_accelerometer, ann_custom_IMUState);
            CompleteStructMember member_accelerometer = TypeObjectUtils::build_complete_struct_member(common_accelerometer, detail_accelerometer);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUState, member_accelerometer);
        }
        {
            TypeIdentifierPair type_ids_gyroscope;
            ReturnCode_t return_code_gyroscope {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gyroscope =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_3", type_ids_gyroscope);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gyroscope)
            {
                return_code_gyroscope =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_gyroscope);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_gyroscope)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_3_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_3 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gyroscope, element_identifier_anonymous_array_float_3_ec))};
                if (!element_identifier_anonymous_array_float_3_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_3 = EK_COMPLETE;
                if (TK_NONE == type_ids_gyroscope.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_3 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_3 = 0;
                PlainCollectionHeader header_anonymous_array_float_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_3, element_flags_anonymous_array_float_3);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_3, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_3", type_ids_gyroscope))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_gyroscope = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gyroscope = 0x00000001;
            bool common_gyroscope_ec {false};
            CommonStructMember common_gyroscope {TypeObjectUtils::build_common_struct_member(member_id_gyroscope, member_flags_gyroscope, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gyroscope, common_gyroscope_ec))};
            if (!common_gyroscope_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gyroscope member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gyroscope = "gyroscope";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gyroscope;
            ann_custom_IMUState.reset();
            CompleteMemberDetail detail_gyroscope = TypeObjectUtils::build_complete_member_detail(name_gyroscope, member_ann_builtin_gyroscope, ann_custom_IMUState);
            CompleteStructMember member_gyroscope = TypeObjectUtils::build_complete_struct_member(common_gyroscope, detail_gyroscope);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUState, member_gyroscope);
        }
        {
            TypeIdentifierPair type_ids_quaternion;
            ReturnCode_t return_code_quaternion {eprosima::fastdds::dds::RETCODE_OK};
            return_code_quaternion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_4", type_ids_quaternion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_quaternion)
            {
                return_code_quaternion =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_quaternion);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_quaternion)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_4_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_4 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quaternion, element_identifier_anonymous_array_float_4_ec))};
                if (!element_identifier_anonymous_array_float_4_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_4 = EK_COMPLETE;
                if (TK_NONE == type_ids_quaternion.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_4 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_4 = 0;
                PlainCollectionHeader header_anonymous_array_float_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_4, element_flags_anonymous_array_float_4);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_4, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_4", type_ids_quaternion))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_quaternion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_quaternion = 0x00000002;
            bool common_quaternion_ec {false};
            CommonStructMember common_quaternion {TypeObjectUtils::build_common_struct_member(member_id_quaternion, member_flags_quaternion, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quaternion, common_quaternion_ec))};
            if (!common_quaternion_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure quaternion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_quaternion = "quaternion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_quaternion;
            ann_custom_IMUState.reset();
            CompleteMemberDetail detail_quaternion = TypeObjectUtils::build_complete_member_detail(name_quaternion, member_ann_builtin_quaternion, ann_custom_IMUState);
            CompleteStructMember member_quaternion = TypeObjectUtils::build_complete_struct_member(common_quaternion, detail_quaternion);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUState, member_quaternion);
        }
        {
            TypeIdentifierPair type_ids_rpy;
            ReturnCode_t return_code_rpy {eprosima::fastdds::dds::RETCODE_OK};
            return_code_rpy =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_3", type_ids_rpy);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_rpy)
            {
                return_code_rpy =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_rpy);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_rpy)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_3_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_3 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_rpy, element_identifier_anonymous_array_float_3_ec))};
                if (!element_identifier_anonymous_array_float_3_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_3 = EK_COMPLETE;
                if (TK_NONE == type_ids_rpy.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_3 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_3 = 0;
                PlainCollectionHeader header_anonymous_array_float_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_3, element_flags_anonymous_array_float_3);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_3, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_3", type_ids_rpy))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_rpy = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_rpy = 0x00000003;
            bool common_rpy_ec {false};
            CommonStructMember common_rpy {TypeObjectUtils::build_common_struct_member(member_id_rpy, member_flags_rpy, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_rpy, common_rpy_ec))};
            if (!common_rpy_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure rpy member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_rpy = "rpy";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_rpy;
            ann_custom_IMUState.reset();
            CompleteMemberDetail detail_rpy = TypeObjectUtils::build_complete_member_detail(name_rpy, member_ann_builtin_rpy, ann_custom_IMUState);
            CompleteStructMember member_rpy = TypeObjectUtils::build_complete_struct_member(common_rpy, detail_rpy);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUState, member_rpy);
        }
        {
            TypeIdentifierPair type_ids_temperature;
            ReturnCode_t return_code_temperature {eprosima::fastdds::dds::RETCODE_OK};
            return_code_temperature =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_temperature);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_temperature)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "temperature Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_temperature = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_temperature = 0x00000004;
            bool common_temperature_ec {false};
            CommonStructMember common_temperature {TypeObjectUtils::build_common_struct_member(member_id_temperature, member_flags_temperature, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_temperature, common_temperature_ec))};
            if (!common_temperature_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure temperature member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_temperature = "temperature";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_temperature;
            ann_custom_IMUState.reset();
            CompleteMemberDetail detail_temperature = TypeObjectUtils::build_complete_member_detail(name_temperature, member_ann_builtin_temperature, ann_custom_IMUState);
            CompleteStructMember member_temperature = TypeObjectUtils::build_complete_struct_member(common_temperature, detail_temperature);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUState, member_temperature);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000005;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_IMUState.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_IMUState);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUState, member_timestamp);
        }
        CompleteStructType struct_type_IMUState = TypeObjectUtils::build_complete_struct_type(struct_flags_IMUState, header_IMUState, member_seq_IMUState);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_IMUState, type_name_IMUState.to_string(), type_ids_IMUState))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "wlrobot::msg::IMUState already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace msg

} // namespace wlrobot

