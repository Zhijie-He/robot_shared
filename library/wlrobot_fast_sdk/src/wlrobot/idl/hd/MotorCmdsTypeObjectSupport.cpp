// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MotorCmdsTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "wlrobot/idl/hd/MotorCmdsTypeObjectSupport.hpp"
#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "wlrobot/idl/hd/MotorCmds.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace wlrobot {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MotorCmds_type_identifier(
        TypeIdentifierPair& type_ids_MotorCmds)
{

    ReturnCode_t return_code_MotorCmds {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MotorCmds =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "wlrobot::msg::MotorCmds", type_ids_MotorCmds);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MotorCmds)
    {
        StructTypeFlag struct_flags_MotorCmds = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MotorCmds = "wlrobot::msg::MotorCmds";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MotorCmds;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MotorCmds;
        CompleteTypeDetail detail_MotorCmds = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MotorCmds, ann_custom_MotorCmds, type_name_MotorCmds.to_string());
        CompleteStructHeader header_MotorCmds;
        header_MotorCmds = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MotorCmds);
        CompleteStructMemberSeq member_seq_MotorCmds;
        {
            TypeIdentifierPair type_ids_mode;
            ReturnCode_t return_code_mode {eprosima::fastdds::dds::RETCODE_OK};
            return_code_mode =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint32_t_12", type_ids_mode);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_mode)
            {
                return_code_mode =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_mode);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_mode)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_uint32_t_12_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_uint32_t_12 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_mode, element_identifier_anonymous_array_uint32_t_12_ec))};
                if (!element_identifier_anonymous_array_uint32_t_12_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_uint32_t_12 = EK_COMPLETE;
                if (TK_NONE == type_ids_mode.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_uint32_t_12 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_uint32_t_12 = 0;
                PlainCollectionHeader header_anonymous_array_uint32_t_12 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_uint32_t_12, element_flags_anonymous_array_uint32_t_12);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_uint32_t_12, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint32_t_12));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint32_t_12", type_ids_mode))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint32_t_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_mode = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_mode = 0x00000000;
            bool common_mode_ec {false};
            CommonStructMember common_mode {TypeObjectUtils::build_common_struct_member(member_id_mode, member_flags_mode, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_mode, common_mode_ec))};
            if (!common_mode_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure mode member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mode = "mode";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mode;
            ann_custom_MotorCmds.reset();
            CompleteMemberDetail detail_mode = TypeObjectUtils::build_complete_member_detail(name_mode, member_ann_builtin_mode, ann_custom_MotorCmds);
            CompleteStructMember member_mode = TypeObjectUtils::build_complete_struct_member(common_mode, detail_mode);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorCmds, member_mode);
        }
        {
            TypeIdentifierPair type_ids_pos;
            ReturnCode_t return_code_pos {eprosima::fastdds::dds::RETCODE_OK};
            return_code_pos =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_12", type_ids_pos);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_pos)
            {
                return_code_pos =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_pos);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_pos)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_12_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_12 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_pos, element_identifier_anonymous_array_float_12_ec))};
                if (!element_identifier_anonymous_array_float_12_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_12 = EK_COMPLETE;
                if (TK_NONE == type_ids_pos.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_12 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_12 = 0;
                PlainCollectionHeader header_anonymous_array_float_12 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_12, element_flags_anonymous_array_float_12);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_12, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_12));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_12", type_ids_pos))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_pos = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_pos = 0x00000001;
            bool common_pos_ec {false};
            CommonStructMember common_pos {TypeObjectUtils::build_common_struct_member(member_id_pos, member_flags_pos, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_pos, common_pos_ec))};
            if (!common_pos_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure pos member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_pos = "pos";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_pos;
            ann_custom_MotorCmds.reset();
            CompleteMemberDetail detail_pos = TypeObjectUtils::build_complete_member_detail(name_pos, member_ann_builtin_pos, ann_custom_MotorCmds);
            CompleteStructMember member_pos = TypeObjectUtils::build_complete_struct_member(common_pos, detail_pos);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorCmds, member_pos);
        }
        {
            TypeIdentifierPair type_ids_w;
            ReturnCode_t return_code_w {eprosima::fastdds::dds::RETCODE_OK};
            return_code_w =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_12", type_ids_w);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_w)
            {
                return_code_w =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_w);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_w)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_12_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_12 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_w, element_identifier_anonymous_array_float_12_ec))};
                if (!element_identifier_anonymous_array_float_12_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_12 = EK_COMPLETE;
                if (TK_NONE == type_ids_w.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_12 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_12 = 0;
                PlainCollectionHeader header_anonymous_array_float_12 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_12, element_flags_anonymous_array_float_12);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_12, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_12));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_12", type_ids_w))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_w = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_w = 0x00000002;
            bool common_w_ec {false};
            CommonStructMember common_w {TypeObjectUtils::build_common_struct_member(member_id_w, member_flags_w, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_w, common_w_ec))};
            if (!common_w_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure w member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_w = "w";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_w;
            ann_custom_MotorCmds.reset();
            CompleteMemberDetail detail_w = TypeObjectUtils::build_complete_member_detail(name_w, member_ann_builtin_w, ann_custom_MotorCmds);
            CompleteStructMember member_w = TypeObjectUtils::build_complete_struct_member(common_w, detail_w);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorCmds, member_w);
        }
        {
            TypeIdentifierPair type_ids_t;
            ReturnCode_t return_code_t {eprosima::fastdds::dds::RETCODE_OK};
            return_code_t =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_12", type_ids_t);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_t)
            {
                return_code_t =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_t);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_t)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_12_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_12 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_t, element_identifier_anonymous_array_float_12_ec))};
                if (!element_identifier_anonymous_array_float_12_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_12 = EK_COMPLETE;
                if (TK_NONE == type_ids_t.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_12 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_12 = 0;
                PlainCollectionHeader header_anonymous_array_float_12 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_12, element_flags_anonymous_array_float_12);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_12, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_12));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_12", type_ids_t))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_t = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_t = 0x00000003;
            bool common_t_ec {false};
            CommonStructMember common_t {TypeObjectUtils::build_common_struct_member(member_id_t, member_flags_t, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_t, common_t_ec))};
            if (!common_t_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure t member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_t = "t";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_t;
            ann_custom_MotorCmds.reset();
            CompleteMemberDetail detail_t = TypeObjectUtils::build_complete_member_detail(name_t, member_ann_builtin_t, ann_custom_MotorCmds);
            CompleteStructMember member_t = TypeObjectUtils::build_complete_struct_member(common_t, detail_t);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorCmds, member_t);
        }
        {
            TypeIdentifierPair type_ids_kp;
            ReturnCode_t return_code_kp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_kp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_12", type_ids_kp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_kp)
            {
                return_code_kp =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_kp);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_kp)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_12_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_12 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_kp, element_identifier_anonymous_array_float_12_ec))};
                if (!element_identifier_anonymous_array_float_12_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_12 = EK_COMPLETE;
                if (TK_NONE == type_ids_kp.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_12 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_12 = 0;
                PlainCollectionHeader header_anonymous_array_float_12 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_12, element_flags_anonymous_array_float_12);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_12, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_12));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_12", type_ids_kp))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_kp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_kp = 0x00000004;
            bool common_kp_ec {false};
            CommonStructMember common_kp {TypeObjectUtils::build_common_struct_member(member_id_kp, member_flags_kp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_kp, common_kp_ec))};
            if (!common_kp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure kp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_kp = "kp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_kp;
            ann_custom_MotorCmds.reset();
            CompleteMemberDetail detail_kp = TypeObjectUtils::build_complete_member_detail(name_kp, member_ann_builtin_kp, ann_custom_MotorCmds);
            CompleteStructMember member_kp = TypeObjectUtils::build_complete_struct_member(common_kp, detail_kp);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorCmds, member_kp);
        }
        {
            TypeIdentifierPair type_ids_kd;
            ReturnCode_t return_code_kd {eprosima::fastdds::dds::RETCODE_OK};
            return_code_kd =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_float_12", type_ids_kd);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_kd)
            {
                return_code_kd =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_kd);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_kd)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_float_12_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_float_12 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_kd, element_identifier_anonymous_array_float_12_ec))};
                if (!element_identifier_anonymous_array_float_12_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_float_12 = EK_COMPLETE;
                if (TK_NONE == type_ids_kd.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_float_12 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_float_12 = 0;
                PlainCollectionHeader header_anonymous_array_float_12 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_float_12, element_flags_anonymous_array_float_12);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_float_12, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_float_12));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_float_12", type_ids_kd))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_float_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_kd = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_kd = 0x00000005;
            bool common_kd_ec {false};
            CommonStructMember common_kd {TypeObjectUtils::build_common_struct_member(member_id_kd, member_flags_kd, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_kd, common_kd_ec))};
            if (!common_kd_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure kd member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_kd = "kd";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_kd;
            ann_custom_MotorCmds.reset();
            CompleteMemberDetail detail_kd = TypeObjectUtils::build_complete_member_detail(name_kd, member_ann_builtin_kd, ann_custom_MotorCmds);
            CompleteStructMember member_kd = TypeObjectUtils::build_complete_struct_member(common_kd, detail_kd);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorCmds, member_kd);
        }
        CompleteStructType struct_type_MotorCmds = TypeObjectUtils::build_complete_struct_type(struct_flags_MotorCmds, header_MotorCmds, member_seq_MotorCmds);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MotorCmds, type_name_MotorCmds.to_string(), type_ids_MotorCmds))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "wlrobot::msg::MotorCmds already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace msg

} // namespace wlrobot

