// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JoystickMsgTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "wlrobot/idl/hd/JoystickMsgTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "wlrobot/idl/hd/JoystickMsg.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace wlrobot {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_JoystickMsg_type_identifier(
        TypeIdentifierPair& type_ids_JoystickMsg)
{

    ReturnCode_t return_code_JoystickMsg {eprosima::fastdds::dds::RETCODE_OK};
    return_code_JoystickMsg =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "wlrobot::msg::JoystickMsg", type_ids_JoystickMsg);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_JoystickMsg)
    {
        StructTypeFlag struct_flags_JoystickMsg = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_JoystickMsg = "wlrobot::msg::JoystickMsg";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_JoystickMsg;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_JoystickMsg;
        CompleteTypeDetail detail_JoystickMsg = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_JoystickMsg, ann_custom_JoystickMsg, type_name_JoystickMsg.to_string());
        CompleteStructHeader header_JoystickMsg;
        header_JoystickMsg = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_JoystickMsg);
        CompleteStructMemberSeq member_seq_JoystickMsg;
        {
            TypeIdentifierPair type_ids_lx;
            ReturnCode_t return_code_lx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_lx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_lx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_lx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "lx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_lx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_lx = 0x00000000;
            bool common_lx_ec {false};
            CommonStructMember common_lx {TypeObjectUtils::build_common_struct_member(member_id_lx, member_flags_lx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_lx, common_lx_ec))};
            if (!common_lx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure lx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_lx = "lx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_lx;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_lx = TypeObjectUtils::build_complete_member_detail(name_lx, member_ann_builtin_lx, ann_custom_JoystickMsg);
            CompleteStructMember member_lx = TypeObjectUtils::build_complete_struct_member(common_lx, detail_lx);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_lx);
        }
        {
            TypeIdentifierPair type_ids_ly;
            ReturnCode_t return_code_ly {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ly =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_ly);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ly)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ly Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ly = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ly = 0x00000001;
            bool common_ly_ec {false};
            CommonStructMember common_ly {TypeObjectUtils::build_common_struct_member(member_id_ly, member_flags_ly, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ly, common_ly_ec))};
            if (!common_ly_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ly member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ly = "ly";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ly;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_ly = TypeObjectUtils::build_complete_member_detail(name_ly, member_ann_builtin_ly, ann_custom_JoystickMsg);
            CompleteStructMember member_ly = TypeObjectUtils::build_complete_struct_member(common_ly, detail_ly);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_ly);
        }
        {
            TypeIdentifierPair type_ids_rx;
            ReturnCode_t return_code_rx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_rx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_rx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_rx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "rx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_rx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_rx = 0x00000002;
            bool common_rx_ec {false};
            CommonStructMember common_rx {TypeObjectUtils::build_common_struct_member(member_id_rx, member_flags_rx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_rx, common_rx_ec))};
            if (!common_rx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure rx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_rx = "rx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_rx;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_rx = TypeObjectUtils::build_complete_member_detail(name_rx, member_ann_builtin_rx, ann_custom_JoystickMsg);
            CompleteStructMember member_rx = TypeObjectUtils::build_complete_struct_member(common_rx, detail_rx);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_rx);
        }
        {
            TypeIdentifierPair type_ids_ry;
            ReturnCode_t return_code_ry {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ry =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_ry);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ry)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ry Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ry = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ry = 0x00000003;
            bool common_ry_ec {false};
            CommonStructMember common_ry {TypeObjectUtils::build_common_struct_member(member_id_ry, member_flags_ry, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ry, common_ry_ec))};
            if (!common_ry_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ry member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ry = "ry";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ry;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_ry = TypeObjectUtils::build_complete_member_detail(name_ry, member_ann_builtin_ry, ann_custom_JoystickMsg);
            CompleteStructMember member_ry = TypeObjectUtils::build_complete_struct_member(common_ry, detail_ry);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_ry);
        }
        {
            TypeIdentifierPair type_ids_lt;
            ReturnCode_t return_code_lt {eprosima::fastdds::dds::RETCODE_OK};
            return_code_lt =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_lt);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_lt)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "lt Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_lt = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_lt = 0x00000004;
            bool common_lt_ec {false};
            CommonStructMember common_lt {TypeObjectUtils::build_common_struct_member(member_id_lt, member_flags_lt, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_lt, common_lt_ec))};
            if (!common_lt_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure lt member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_lt = "lt";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_lt;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_lt = TypeObjectUtils::build_complete_member_detail(name_lt, member_ann_builtin_lt, ann_custom_JoystickMsg);
            CompleteStructMember member_lt = TypeObjectUtils::build_complete_struct_member(common_lt, detail_lt);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_lt);
        }
        {
            TypeIdentifierPair type_ids_rt;
            ReturnCode_t return_code_rt {eprosima::fastdds::dds::RETCODE_OK};
            return_code_rt =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_rt);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_rt)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "rt Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_rt = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_rt = 0x00000005;
            bool common_rt_ec {false};
            CommonStructMember common_rt {TypeObjectUtils::build_common_struct_member(member_id_rt, member_flags_rt, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_rt, common_rt_ec))};
            if (!common_rt_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure rt member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_rt = "rt";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_rt;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_rt = TypeObjectUtils::build_complete_member_detail(name_rt, member_ann_builtin_rt, ann_custom_JoystickMsg);
            CompleteStructMember member_rt = TypeObjectUtils::build_complete_struct_member(common_rt, detail_rt);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_rt);
        }
        {
            TypeIdentifierPair type_ids_a;
            ReturnCode_t return_code_a {eprosima::fastdds::dds::RETCODE_OK};
            return_code_a =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_a);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_a)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_a = 0x00000006;
            bool common_a_ec {false};
            CommonStructMember common_a {TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_a, common_a_ec))};
            if (!common_a_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure a member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_a = "a";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_JoystickMsg);
            CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_a);
        }
        {
            TypeIdentifierPair type_ids_b;
            ReturnCode_t return_code_b {eprosima::fastdds::dds::RETCODE_OK};
            return_code_b =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_b);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_b)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_b = 0x00000007;
            bool common_b_ec {false};
            CommonStructMember common_b {TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_b, common_b_ec))};
            if (!common_b_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure b member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_b = "b";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_JoystickMsg);
            CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_b);
        }
        {
            TypeIdentifierPair type_ids_x;
            ReturnCode_t return_code_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_x = 0x00000008;
            bool common_x_ec {false};
            CommonStructMember common_x {TypeObjectUtils::build_common_struct_member(member_id_x, member_flags_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_x, common_x_ec))};
            if (!common_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_x = "x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_x;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_x = TypeObjectUtils::build_complete_member_detail(name_x, member_ann_builtin_x, ann_custom_JoystickMsg);
            CompleteStructMember member_x = TypeObjectUtils::build_complete_struct_member(common_x, detail_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_x);
        }
        {
            TypeIdentifierPair type_ids_y;
            ReturnCode_t return_code_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_y = 0x00000009;
            bool common_y_ec {false};
            CommonStructMember common_y {TypeObjectUtils::build_common_struct_member(member_id_y, member_flags_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_y, common_y_ec))};
            if (!common_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_y = "y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_y;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_y = TypeObjectUtils::build_complete_member_detail(name_y, member_ann_builtin_y, ann_custom_JoystickMsg);
            CompleteStructMember member_y = TypeObjectUtils::build_complete_struct_member(common_y, detail_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_y);
        }
        {
            TypeIdentifierPair type_ids_start;
            ReturnCode_t return_code_start {eprosima::fastdds::dds::RETCODE_OK};
            return_code_start =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_start);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_start)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "start Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_start = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_start = 0x0000000a;
            bool common_start_ec {false};
            CommonStructMember common_start {TypeObjectUtils::build_common_struct_member(member_id_start, member_flags_start, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_start, common_start_ec))};
            if (!common_start_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure start member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_start = "start";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_start;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_start = TypeObjectUtils::build_complete_member_detail(name_start, member_ann_builtin_start, ann_custom_JoystickMsg);
            CompleteStructMember member_start = TypeObjectUtils::build_complete_struct_member(common_start, detail_start);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_start);
        }
        {
            TypeIdentifierPair type_ids_select;
            ReturnCode_t return_code_select {eprosima::fastdds::dds::RETCODE_OK};
            return_code_select =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_select);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_select)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "select Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_select = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_select = 0x0000000b;
            bool common_select_ec {false};
            CommonStructMember common_select {TypeObjectUtils::build_common_struct_member(member_id_select, member_flags_select, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_select, common_select_ec))};
            if (!common_select_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure select member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_select = "select";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_select;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_select = TypeObjectUtils::build_complete_member_detail(name_select, member_ann_builtin_select, ann_custom_JoystickMsg);
            CompleteStructMember member_select = TypeObjectUtils::build_complete_struct_member(common_select, detail_select);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_select);
        }
        {
            TypeIdentifierPair type_ids_l1;
            ReturnCode_t return_code_l1 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_l1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_l1);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_l1)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "l1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_l1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_l1 = 0x0000000c;
            bool common_l1_ec {false};
            CommonStructMember common_l1 {TypeObjectUtils::build_common_struct_member(member_id_l1, member_flags_l1, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_l1, common_l1_ec))};
            if (!common_l1_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure l1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_l1 = "l1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_l1;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_l1 = TypeObjectUtils::build_complete_member_detail(name_l1, member_ann_builtin_l1, ann_custom_JoystickMsg);
            CompleteStructMember member_l1 = TypeObjectUtils::build_complete_struct_member(common_l1, detail_l1);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_l1);
        }
        {
            TypeIdentifierPair type_ids_r1;
            ReturnCode_t return_code_r1 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_r1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_r1);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_r1)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "r1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_r1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_r1 = 0x0000000d;
            bool common_r1_ec {false};
            CommonStructMember common_r1 {TypeObjectUtils::build_common_struct_member(member_id_r1, member_flags_r1, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_r1, common_r1_ec))};
            if (!common_r1_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure r1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_r1 = "r1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_r1;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_r1 = TypeObjectUtils::build_complete_member_detail(name_r1, member_ann_builtin_r1, ann_custom_JoystickMsg);
            CompleteStructMember member_r1 = TypeObjectUtils::build_complete_struct_member(common_r1, detail_r1);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_r1);
        }
        {
            TypeIdentifierPair type_ids_l3;
            ReturnCode_t return_code_l3 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_l3 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_l3);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_l3)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "l3 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_l3 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_l3 = 0x0000000e;
            bool common_l3_ec {false};
            CommonStructMember common_l3 {TypeObjectUtils::build_common_struct_member(member_id_l3, member_flags_l3, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_l3, common_l3_ec))};
            if (!common_l3_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure l3 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_l3 = "l3";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_l3;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_l3 = TypeObjectUtils::build_complete_member_detail(name_l3, member_ann_builtin_l3, ann_custom_JoystickMsg);
            CompleteStructMember member_l3 = TypeObjectUtils::build_complete_struct_member(common_l3, detail_l3);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_l3);
        }
        {
            TypeIdentifierPair type_ids_r3;
            ReturnCode_t return_code_r3 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_r3 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_r3);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_r3)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "r3 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_r3 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_r3 = 0x0000000f;
            bool common_r3_ec {false};
            CommonStructMember common_r3 {TypeObjectUtils::build_common_struct_member(member_id_r3, member_flags_r3, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_r3, common_r3_ec))};
            if (!common_r3_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure r3 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_r3 = "r3";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_r3;
            ann_custom_JoystickMsg.reset();
            CompleteMemberDetail detail_r3 = TypeObjectUtils::build_complete_member_detail(name_r3, member_ann_builtin_r3, ann_custom_JoystickMsg);
            CompleteStructMember member_r3 = TypeObjectUtils::build_complete_struct_member(common_r3, detail_r3);
            TypeObjectUtils::add_complete_struct_member(member_seq_JoystickMsg, member_r3);
        }
        CompleteStructType struct_type_JoystickMsg = TypeObjectUtils::build_complete_struct_type(struct_flags_JoystickMsg, header_JoystickMsg, member_seq_JoystickMsg);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_JoystickMsg, type_name_JoystickMsg.to_string(), type_ids_JoystickMsg))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "wlrobot::msg::JoystickMsg already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace msg

} // namespace wlrobot

